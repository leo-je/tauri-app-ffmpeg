name: main-schedule
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      doRelease:
        description: 'Publish new release'
        type: boolean
        default: false
        required: false
      buildOnly:
        description: 'Only build ffmpeg'
        type: boolean
        default: false
        required: false
  schedule:
    - cron: '*/30 * * * *'

jobs:
  get_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
      windows_version: ${{ steps.get_version.outputs.WINDOWSVERSION }}
      current_datetime: ${{ steps.get_version.outputs.CURRENT_DATETIME }}
      macos_version: ${{ steps.get_version.outputs.MACOSVERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: 读取 package.json 版本号
        id: get_version
        run: |
          echo "VERSION=$(jq -r '.version' package.json)" >> $GITHUB_OUTPUT
          echo "WINDOWSVERSION=$(jq -r '.version' package.json)-${{github.run_number}}" >> $GITHUB_OUTPUT
          echo "MACOSVERSION=$(jq -r '.version' package.json)-${{github.run_number}}" >> $GITHUB_OUTPUT
          CURRENT_DATETIME=$(date +"%Y%m%d %H:%M:%S")
          echo "CURRENT_DATETIME=$CURRENT_DATETIME" >> $GITHUB_OUTPUT

  publish-tauri:
    needs: get_version
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            target: 'aarch64-apple-darwin'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            target: 'x86_64-apple-darwin'
            args: '--target x86_64-apple-darwin'
          #- platform: 'ubuntu-22.04' # for Tauri v1 you could replace this with ubuntu-20.04.
          #  args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      # - name: install dependencies (ubuntu only)
      #   if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
      #  run: |
      #    sudo apt-get update
      #    sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.

      - name: install frontend dependencies
        run: yarn install # change this to npm, pnpm or bun depending on which one you use.

      # 下载 ffmpeg 
      - name: dowm load ffmpeg for macos
        if: ${{ matrix.platform == 'macos-latest' }}
        run: |
          curl -L -o ffmpeg.zip https://evermeet.cx/ffmpeg/ffmpeg-118392-g0113e30806.zip
          mkdir -p "./src-tauri/assets/mac"
          7z x ffmpeg.zip -aoa -o"./ffmpeg-mac"
          ls
          cp -r "./ffmpeg-mac/ffmpeg" "./src-tauri/assets/mac/"

      # 下载 ffmpeg    
      - name: dowm load ffmpeg for windows
        if: ${{ matrix.platform == 'windows-latest' }}
        run: |
          curl -L -o ffmpeg.zip https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl-shared.zip
          New-Item -Path ".\src-tauri\assets\win\ffmpeg" -ItemType Directory -Force
          7z x ffmpeg.zip -aoa -o".\ffmpeg"
          ls ".\ffmpeg"
          Copy-Item -Path ".\ffmpeg\ffmpeg-master-latest-win64-gpl-shared\*" -Destination ".\src-tauri\assets\win\ffmpeg" -Recurse -Force
          ls ".\src-tauri\assets\win\ffmpeg"

      - name: Create GitHub Release for macos
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          tagName: app-v${{ needs.get_version.outputs.version }}
          # releaseName: 'App version v__VERSION__'
          releaseName: 'App version v${{ needs.get_version.outputs.version }}'
          # releaseBody: 'tag:v.__VERSION__. ${{ github.event.head_commit.message }}.'
          releaseBody: 'tag: v${{ needs.get_version.outputs.version }}. ${{ github.event.head_commit.message }},build number ${{ github.run_number }},time: ${{ needs.get_version.outputs.current_datetime }}'
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }} --config '{"version":"${{matrix.platform == 'windows-latest' && needs.get_version.outputs.windows_version || needs.get_version.outputs.macos_version}}"}'
 