name: 'publish'

on:
    push:
      branches:
        - main
    pull_request:
      branches:
        - main

# This workflow will trigger on each push to the `release` branch to create or update a GitHub release, build your app, and upload the artifacts to the release.

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            target: 'aarch64-apple-darwin'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            target: 'x86_64-apple-darwin'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04' # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.

      - name: install frontend dependencies
        run: yarn install # change this to npm, pnpm or bun depending on which one you use.

      # 下载 ffmpeg 
      - name: dowm load ffmpeg for macos
        if: ${{ matrix.platform == 'macos-latest' }}
        run: |
          curl -L -o ffmpeg.zip https://evermeet.cx/ffmpeg/ffmpeg-118392-g0113e30806.zip
          mkdir -p "./src-tauri/assets/mac"
          7z x ffmpeg.zip -aoa -o"./ffmpeg-mac"
          ls
          cp -r "./ffmpeg-mac/ffmpeg" "./src-tauri/assets/mac/"

      # 下载 ffmpeg    
      - name: dowm load ffmpeg for windows
        if: ${{ matrix.platform == 'windows-latest' }}
        run: |
          curl -L -o ffmpeg.zip https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl-shared.zip
          New-Item -Path "assets/win/ffmpeg" -ItemType Directory -Force
          Expand-Archive -Path "./ffmpeg.zip" -DestinationPath "assets/win/ffmpeg" -Force


      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

      - name: Find the app file
        if: ${{ matrix.platform == 'macos-latest' || matrix.platform == 'ubuntu-latest' }}
        id: find-dmg
        run: |
          echo "DMG_X86_FILE=$(find src-tauri/target/x86_64-apple-darwin/release/bundle/dmg -name '*.dmg')" >> $GITHUB_ENV
          echo "DMG_ARM_FILE=$(find src-tauri/target/aarch64-apple-darwin/release/bundle/dmg -name '*.dmg')" >> $GITHUB_ENV
          echo "DMG_DEB_FILE=$(find src-tauri/target/release/bundle/deb -name '*.deb')" >> $GITHUB_ENV
          echo "DMG_RPM_FILE=$(find src-tauri/target/release/bundle/rpm -name '*.rpm')" >> $GITHUB_ENV

      # 上传构建的可执行文件作为 Artifact（可选）
      - name: Upload Artifact (x86 DMG)
        if: ${{ matrix.platform == 'macos-latest' &&  matrix.target == 'x86_64-apple-darwin'}}
        uses: actions/upload-artifact@v4
        with:
          name: tauri-macos-x86-dmg
          path: ${{ env.DMG_X86_FILE }}  # 你要上传的构建文件路径

      # 上传构建的可执行文件作为 Artifact（可选）
      - name: Upload Artifact (arm DMG)
        if: ${{ matrix.platform == 'macos-latest' &&  matrix.target == 'aarch64-apple-darwin'}}
        uses: actions/upload-artifact@v4
        with:
          name: tauri-macos-arm-dmg
          path: ${{ env.DMG_ARM_FILE }}  # 你要上传的构建文件路径

      # 上传构建的可执行文件作为 Artifact（可选）
      - name: Upload Windows Build Artifact-exe
        if: ${{ matrix.platform == 'windows-latest' }}
        uses: actions/upload-artifact@v4
        with:
          name: tauri-windows-build
          path: src-tauri\target\release\bundle\nsis\*.exe  # 你要上传的构建文件路径

      # 上传构建的可执行文件作为 Artifact（可选）
      - name: Upload Artifact (linux)
        if: ${{ matrix.platform == 'ubuntu-latest' }}
        uses: actions/upload-artifact@v4
        with:
          name: tauri-windows-build
          path: ${{env.DMG_DEB_FILE}},${{env.DMG_RPM_FILE}}  # 你要上传的构建文件路径

      - name: Create GitHub Release
        if: github.event_name == 'push'
        uses: softprops/action-gh-release@v2 
        with:
          tag_name: v1.0.${{ github.run_number }}
          name: "convert app Release v1.0.${{ github.run_number }}"
          draft: false
          prerelease: false
          files: ${{ env.DMG_FILE }},${{env.DMG_ARM_FILE}},${{env.DMG_DEB_FILE}},${{env.DMG_RPM_FILE}},${{env.DMG_EXE_FILE}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}